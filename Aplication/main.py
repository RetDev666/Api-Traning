import os.path
from flask import Flask, request, jsonify, render_template
import random
from werkzeug.utils import send_from_directory

app = Flask(__name__,
            template_folder='../Templates',
            static_folder='../Static')

# –î–∞–Ω—ñ
animals = ["üê± –ö—ñ—Ç", "üê∂ –°–æ–±–∞–∫–∞", "üê∏ –ñ–∞–±–∞", "üê∞ –ó–∞—î—Ü—å", "ü¶ä –õ–∏—Å–∏—Ü—è"]
colors = ["—á–µ—Ä–≤–æ–Ω–∏–π", "—Å–∏–Ω—ñ–π", "–∑–µ–ª–µ–Ω–∏–π", "–∂–æ–≤—Ç–∏–π", "—Ä–æ–∂–µ–≤–∏–π"]
jokes = [
    "–ß–æ–º—É –∫–æ–º–ø'—é—Ç–µ—Ä –ø—ñ—à–æ–≤ –¥–æ –ª—ñ–∫–∞—Ä—è? –ë–æ –≤ –Ω—å–æ–≥–æ –±—É–≤ –≤—ñ—Ä—É—Å! üíª",
    "–©–æ –∫–∞–∂–µ —Å–∏—Ä –Ω–∞ —Ñ–æ—Ç–æ? –ú–æ–ª–æ–∫–æ! üßÄ",
    "–ß–æ–º—É —Ä–∏–±–∞ –Ω–µ –≥—Ä–∞—î —Ç–µ–Ω—ñ—Å? –ë–æ—ó—Ç—å—Å—è —Å—ñ—Ç–∫–∏! üêü"
]


def check_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —Ç–∞ –ø–∞–ø–æ–∫"""
    template_path = os.path.join(os.path.dirname(__file__), '../Templates')
    static_path = os.path.join(os.path.dirname(__file__), '../Static')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω —à–ª—è—Ö –æ–∫—Ä–µ–º–æ
    if not os.path.exists(template_path):
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: –ü–∞–ø–∫–∞ Templates –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {template_path}")
        return False

    if not os.path.exists(static_path):
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: –ü–∞–ø–∫–∞ Static –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {static_path}")
        return False

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ index.html
    index_html = os.path.join(template_path, 'index.html')
    if not os.path.exists(index_html):
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê: –§–∞–π–ª index.html –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {index_html}")
        print("üìÅ –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∞:")
        print("   Templates/")
        print("   ‚îî‚îÄ‚îÄ index.html")
        print("   Static/")
        print("   ‚îú‚îÄ‚îÄ CSS/")
        print("   ‚îÇ   ‚îî‚îÄ‚îÄ style.css")
        print("   ‚îî‚îÄ‚îÄ JS/")
        print("       ‚îî‚îÄ‚îÄ script.js")
        return False

    return True


# –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
@app.route('/')
def home():
    return render_template('index.html')


# –ú–∞—Ä—à—Ä—É—Ç–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
@app.route('/CSS/<path:filename>')
def css_files(filename):
    return send_from_directory('../Static/CSS', filename)


@app.route('/JS/<path:filename>')
def js_files(filename):
    return send_from_directory('../Static/JS', filename)


# API endpoints
@app.route('/api/animal')
def random_animal():
    animal = random.choice(animals)
    return jsonify({"message": f"–¢–≤–æ—è —Ç–≤–∞—Ä–∏–Ω–∞: {animal} üéâ"})


@app.route('/api/color')
def random_color():
    color = random.choice(colors)
    return jsonify({"message": f"–¢–≤—ñ–π –∫–æ–ª—ñ—Ä: {color} üåà"})


@app.route('/api/joke')
def joke():
    joke = random.choice(jokes)
    return jsonify({"message": joke})


@app.route('/api/calculate', methods=['POST'])
def calculate():
    try:
        data = request.json
        if not data:
            return jsonify({"error": "–ù–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–∞–Ω–∏—Ö"}), 400

        num1 = data.get('num1')
        num2 = data.get('num2')

        if num1 is None or num2 is None:
            return jsonify({"error": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –æ–±–∏–¥–≤–∞ —á–∏—Å–ª–∞"}), 400

        result = num1 + num2
        return jsonify({
            "message": f"üßÆ {num1} + {num2} = {result} ‚ú®"
        })
    except Exception as e:
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ"}), 400

@app.route('/api/mines', methods=['POST'])
def mines():
    try:
        data = request.json
        if not data:
            return jsonify({"error": "–ù–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–∞–Ω–∏—Ö"}), 400

        num3 = data.get('num3')
        num4 = data.get('num4')

        if num3 is None or num4 is None:
            return jsonify({"error": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –æ–±–∏–¥–≤–∞ —á–∏—Å–ª–∞"}), 400

        result2 = num3 - num4
        return jsonify({
            "message": f"üßÆ {num3} - {num4} = {result2} ‚ú®"
        })
    except Exception as e:
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—á–∏—Å–ª–µ–Ω–Ω—ñ"}), 400

@app.route('/api/greeting', methods=['POST'])
def getGreeting():
    try:
        data = request.json
        if not data:
            return jsonify({"error": "–ù–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–∞–Ω–∏—Ö"}), 400

        name = data.get('name')
        if not name:
            return jsonify({"error": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ —ñ–º'—è"}), 400

        age = data.get('age', 0)

        if age > 0:
            message = f"üëã –ü—Ä–∏–≤—ñ—Ç, {name}! –¢–æ–±—ñ {age} —Ä–æ–∫—ñ–≤ - —Ü–µ —á—É–¥–æ–≤–æ! üéà"
        else:
            message = f"üëã –ü—Ä–∏–≤—ñ—Ç, {name}! –†–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏! üòä"

        return jsonify({"message": message})
    except Exception as e:
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500


@app.route('/api/letters', methods=['POST'])
def count_letters():
    try:
        data = request.json
        if not data:
            return jsonify({"error": "–ù–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –¥–∞–Ω–∏—Ö"}), 400

        word = data.get('word')
        if not word:
            return jsonify({"error": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Å–ª–æ–≤–æ"}), 400

        count = len(word)

        if count == 1:
            message = f"üî§ –í —Å–ª–æ–≤—ñ '{word}' –≤—Å—å–æ–≥–æ 1 –±—É–∫–≤–∞!"
        elif count < 5:
            message = f"üî§ –í —Å–ª–æ–≤—ñ '{word}' {count} –±—É–∫–≤–∏ - –∫–æ—Ä–æ—Ç–∫–µ —Å–ª–æ–≤–æ!"
        elif count < 10:
            message = f"üî§ –í —Å–ª–æ–≤—ñ '{word}' {count} –±—É–∫–≤ - —Å–µ—Ä–µ–¥–Ω—î —Å–ª–æ–≤–æ!"
        else:
            message = f"üî§ –í–∞—É! –í —Å–ª–æ–≤—ñ '{word}' –∞–∂ {count} –±—É–∫–≤ - –¥–æ–≤–∂–µ–ª–µ–∑–Ω–µ —Å–ª–æ–≤–æ! ü§Ø"

        return jsonify({"message": message})
    except Exception as e:
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –¥–∏—Ç—è—á–∏–π —Å–∞–π—Ç...")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    if check_files():
        print("‚úÖ –í—Å—ñ —Ñ–∞–π–ª–∏ –Ω–∞ –º—ñ—Å—Ü—ñ!")
        print("üåê –í—ñ–¥–∫—Ä–∏–π: http://localhost:5000")
        app.run(debug=True, host='0.0.0.0', port=5000)
    else:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: –Ω–µ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑–Ω–∞–π–¥–µ–Ω–æ")